# -*- coding: utf-8 -*-
"""
Created by Iván Cárdenas | Twitter: @cygnus26 | Linkedin: @icmaps
Generated by ArcGIS ModelBuilder on : 2023-05-29 13:01:40
"""

import arcgis
from arcgis.gis import GIS
import arcpy
from arcpy import env
import os
from sys import argv
import random
import time
from datetime import datetime

gis = GIS(url='https://www.arcgis.com/' , username='YOUR_USERNAME', password='YOUR_PASSWORD')

def createNetwork(roads, template):
    #Check out Network Analyst license if available. Fail if the Network Analyst license is not available.
    if arcpy.CheckExtension("network") == "Available":
        arcpy.CheckOutExtension("network")
        arcpy.AddMessage  ("Extension Available")
    else:
        raise arcpy.ExecuteError("Network Analyst Extension license is not available.")
    env.overwriteOutput = True
    workspace = arcpy.env.scratchGDB
    folder = "%scratchFolder%"
    spatial_ref = arcpy.Describe(roads).spatialReference
    sr= arcpy.SpatialReference(3857)
    arcpy.AddMessage ("SRC: "+str(sr))
    arcpy.management.CreateFeatureDataset(workspace,"Network",sr)

    # arcpy.management.CopyFeatures(roads,folder+"/T230405_RoadNetwork_v5.shp")
    # bypass = folder+"/T230405_RoadNetwork_v5.shp"
    arcpy.management.CopyFeatures(roads,workspace+"/Network/T230405_RoadNetwork_v5")
    time.sleep(20)
    arcpy.na.CreateNetworkDatasetFromTemplate(template, workspace+"/Network")
    arcpy.na.BuildNetwork(workspace+"/Network/Hatfield_Network")
    network = os.path.join(workspace,"Network/Hatfield_Network")
    arcpy.AddMessage("Network created")
    arcpy.AddMessage(network)
    return network

def VRP(network,in_orders,in_depots,in_routes,in_renewal,output_dir,out_route,out_orders):  # VRP v1.2

 
    #Check out Network Analyst license if available. Fail if the Network Analyst license is not available.
    if arcpy.CheckExtension("network") == "Available":
        arcpy.CheckOutExtension("network")
        arcpy.AddMessage  ("Extension Available")
    else:
        raise arcpy.ExecuteError("Network Analyst Extension license is not available.")
    
    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Network Analyst Tools.tbx")

    #The NA layer's data will be saved to the workspace specified here
    env.workspace = os.path.join(output_dir, "Output.gdb")
    env.overwriteOutput = True


    #Set local variables
    input_gdb = '%ScratchGDB%'
    # network = os.path.join(input_gdb, "Network", "Hatfield_Network")
    layer_name = "Truck Routes"
    travel_mode = "Waste Truck"
    time_units = "Minutes"
    distance_units = "Kilometers"
    # in_orders = os.path.join(input_gdb, "Network", "Containers")
    # in_depots = os.path.join(input_gdb, "Network", "Landfill_Entrance")
    # in_routes = os.path.join(input_gdb, "Network", "Route_Definition")
    # in_renewal = os.path.join(input_gdb, "Renewal")
    output_layer_file = os.path.join(output_dir, layer_name + ".lyrx")
    arcpy.AddMessage  ("Variables Set")

    vrp = arcpy.na.MakeVehicleRoutingProblemAnalysisLayer(
        network, layer_name, travel_mode, time_units, distance_units,
        line_shape="ALONG_NETWORK")
    arcpy.AddMessage  ("VRP created")
    
    # Get the layer object form the result object. The route layer can now be
    # referenced using the layer object.
    layer_object = vrp.getOutput(0)
    arcpy.AddMessage(layer_object)

    # Get the names of all the sublayers within the VRP layer.
    sub_layer_names = arcpy.na.GetNAClassNames(layer_object)
    # Store the layer names that we will use later
    orders_layer_name = sub_layer_names["Orders"]
    depots_layer_name = sub_layer_names["Depots"]
    routes_layer_name = sub_layer_names["Routes"]
    routeRenewal_layer_name = sub_layer_names["RouteRenewals"]
    arcpy.AddMessage("Sublayers Created")

    # Load the store locations as orders. Using field mappings we map the
    # TimeWindowStart1, TimeWindowEnd1, and DeliveryQuantities properties
    # for Orders from the fields of store features and assign a value of
    # 0 to MaxViolationTime1 property. The Name and ServiceTime properties
    # have the correct mapped field names when using the candidate fields
    # from store locations feature class.
    # Process: Select Layer By Attribute (Select Layer By Attribute) (management)
    Containers_to_Collect, Count = arcpy.management.SelectLayerByAttribute(in_orders, where_clause="Saturation >= 75") #Arbitrary 
    arcpy.AddMessage("Containers selected")

    candidate_fields = arcpy.ListFields(Containers_to_Collect)
    order_field_mappings = arcpy.na.NAClassFieldMappings(layer_object, orders_layer_name, False, candidate_fields)
    order_field_mappings["Name"].mappedFieldName = "Container "+"OBJECTID"
    order_field_mappings["PickupQuantity_1"].mappedFieldName = "Acumm_wa"
    order_field_mappings["AssignmentRule"].defaultValue = 3
    arcpy.na.AddLocations(layer_object, orders_layer_name, Containers_to_Collect, order_field_mappings, append="CLEAR")
    arcpy.AddMessage("Containers Loaded")

    
   # Load the depots from the distribution center features. Using field mappings
    # we map the Name properties for Depots from the fields of distribution
    # center features and assign a value of 8 AM for TimeWindowStart1 and a
    # value of 5 PM for TimeWindowEnd1 properties
    depot_field_mappings = arcpy.na.NAClassFieldMappings(layer_object, depots_layer_name)
    depot_field_mappings["Name"].mappedFieldName = "Name"
    depot_field_mappings["TimeWindowStart"].defaultValue = "6 AM"
    depot_field_mappings["TimeWindowEnd"].defaultValue = "10 PM"
    arcpy.na.AddLocations(layer_object, depots_layer_name, in_depots, depot_field_mappings, append="CLEAR")

 # Load the routes from a table containing information about routes. In this
    # case, since the fields on the routes table and property names for Routes
    # are the same, we will just use the default field mappings
    routes_field_mappings = arcpy.na.NAClassFieldMappings(layer_object, routes_layer_name)
    routes_field_mappings["Name"].mappedFieldName = "Name"
    routes_field_mappings["Capacity_1"].mappedFieldName = "Capacity"
    routes_field_mappings["StartDepotName"].defaultValue = "Hatherley Municipal Dumping Site"
    routes_field_mappings["EndDepotName"].defaultValue = "Hatherley Municipal Dumping Site"
    routes_field_mappings["EarliestStartTime"].defaultValue = "06:00:00"
    routes_field_mappings["LatestStartTime"].defaultValue = "08:00:00"
    routes_field_mappings["CostPerUnitTime"].defaultValue = 1
    routes_field_mappings["CostPerUnitDistance"].defaultValue = 5.75
    routes_field_mappings["MaxOrderCount"].defaultValue = 1000
    arcpy.na.AddLocations(layer_object, routes_layer_name, in_routes, routes_field_mappings, append="CLEAR")


    # Load renewal conditions
    renewal_field_mappings = arcpy.na.NAClassFieldMappings(layer_object, routeRenewal_layer_name)
    renewal_field_mappings["RouteName"].mappedFieldName = "RouteName"
    renewal_field_mappings["DepotName"].mappedFieldName = "DepotName"
    renewal_field_mappings["ServiceTime"].defaultValue = 30
    arcpy.na.AddLocations(layer_object, routeRenewal_layer_name, in_renewal, renewal_field_mappings, append="CLEAR")


    arcpy.AddMessage ("Conditions loaded")
    arcpy.AddMessage ("Initiating VRP Solution please wait")
    for i in range (0,5):
        t= '====='
        time.sleep(2)
        arcpy.AddMessage(t*i)

    # Solve the VRP layer
    arcpy.na.Solve(layer_object)

    # Save the solved VRP layer as a layer file on disk with relative paths
    #Save the solved closest facility layer as a layer file on disk
    layer_object.saveACopy(output_layer_file)
    result = output_layer_file

    # Share the routes from the closest facility analysis as route layers
    # directions = arcpy.na.ShareAsRouteLayers(layer_object, "Share closest facility solve result as route layers")

    route = arcpy.na.GetNASublayer(layer_object, "Routes")
    orders = arcpy.na.GetNASublayer(layer_object, "Orders")

    with arcpy.da.SearchCursor(route, ["SHAPE@","OrderCount","TotalTime","DistanceCost","TotalDistance","RenewalCount"]) as cursor:
        for row in cursor:
            with arcpy.da.InsertCursor(str(out_route), ["SHAPE@","OrderCount","TotalTime","DistanceCo","TotalDista","RenewalCou"]) as cursor1:
                cursor1.insertRow(row)

    with arcpy.da.SearchCursor(orders, ["SHAPE@","Name","DeliveryQuantity_1", "Sequence", "ArriveTime","DistanceToNetworkInMeters"]) as cursor:
        for row in cursor:
            with arcpy.da.InsertCursor(str(out_orders),["SHAPE@","Name","PickupQuan", "Sequence", "ArriveTime","DistanceTo"]) as cursor1:
                cursor1.insertRow(row)

    arcpy.AddMessage ("Script Completed Successfully")
    arcpy.SelectLayerByAttribute_management(in_orders, "CLEAR_SELECTION")

    
    aprx = arcpy.mp.ArcGISProject("CURRENT")
    map = aprx.activeMap

    # Add the result layer to the current map
    result_layer = arcpy.mp.LayerFile(output_layer_file)
    map.addLayer(result_layer, 'TOP')

    return result

def resetValues(in_layer, routes, orders):
    path = str(in_layer)

    # Iterate over the rows in the shapefile
    with arcpy.da.UpdateCursor(path, ['Acumm_wa','Saturation']) as cursor:
        for row in cursor:
            row[0] = 0
            row[1] = 0
            cursor.updateRow(row)
    
    with arcpy.da.UpdateCursor(str(routes), ["SHAPE@","OrderCount","TotalTime","DistanceCo","TotalDista","RenewalCou"]) as cursor1:
        for rows in cursor1:
            cursor1.deleteRow()

    with arcpy.da.UpdateCursor(str(orders),["SHAPE@","Name","PickupQuan", "Sequence", "ArriveTime","DistanceTo"]) as cursor1:
        for rows in cursor1:
            cursor1.deleteRow()
    

    arcpy.AddMessage("Values set to 0")

def generate_random_values(in_layer):
    # Set the path to the input shapefile
    path = str(in_layer)
    

    # Iterate over the rows in the shapefile
    with arcpy.da.UpdateCursor(path, ['Waste_m3__', 'Current_wa', 'Acumm_wa', 'Volume', 'Saturation']) as cursor:
        for row in cursor:
            n = random.uniform(0, row[0] / 24)  # Generate random value between 0 and M
            # Update 'n' attribute with the random value
            row[1] = n  
            # Accumulate up to M + 20%
            accumulated_value = min((row[2] + n), (row[0] * 1.2))

            # Update 'accumulated' attribute with the accumulated value
            row[2] = accumulated_value
            # Update saturation attribute
            try:
                saturation = (accumulated_value / row[3]) * 100
                row[4] = saturation
            except:
                pass

            cursor.updateRow(row)

            # arcpy.AddMessage(f"Updated record {index}: n = {n}, accumulated = {accumulated_value}")

def cleaningTrash(in_layer, routes, orders):
    arcpy.AddMessage("Cleaning Up Waste, please wait...")
    arcpy.AddMessage("""\
                          __===*@@@ @@@@@ @@@@@
                 /       ________________________________________ ___ __ _ _
          ______|^|_    | ***                                    |___ ___ __
         /|/~~~~~~~|    |  ***                                   |____ __ _ __
        / |    {_) |    |   ***  Hatfield Waste Collection       |__ ___ _ __
   ____/__|)  /~~| |@@@@|    ************************************|____ ___ _
  / _____ ~~~~~~~~~|@@@@|     ***********************************|___ __ _ __
 | /     \\      --|    |_/~~~~~\_______________________/~~~~~\__|_____ __ _ _
 |/  ***  \\       |---~|/  ***  \_____________________/  ***  \_|___ _ __ _ _
 `  ** **  ~~~~=====       ** **                         ** **
     ***                    ***                           ***
------------------------------------------------------------------------------

""")
    path = str(in_layer)
    env.overwriteOutput = True

    with arcpy.da.UpdateCursor(path, ['Waste_m3__', 'Current_wa', 'Acumm_wa', 'Volume', 'Saturation']) as cursor:
        for row in cursor:
            if row[4] >= 75:
                row[2] = 0
                row[4] = 0
            cursor.updateRow(row)

    with arcpy.da.UpdateCursor(str(routes), ["SHAPE@",]) as cursor1:
        for rows in cursor1:
            cursor1.deleteRow()

    with arcpy.da.UpdateCursor(str(orders), ["SHAPE@",]) as cursor:
        for rows in cursor:
            cursor.deleteRow()
    
def getTemplate(folder):
    item = gis.content.get('81d7a8a5346947acaf03e8712ff78892')
    output = os.path.join(folder,"Network_template.xml")

    item.download(save_path=folder)


    return output

def getLayers():
    item1 = gis.content.get('b9a6870645364a90b99dfd414f3819d6')
    c = [c.url for c in item1.layers if c.properties.name == 'Containers'][0]
    l = [l.url for l in item1.layers if l.properties.name == 'Landfill Entrance'][0]   
    r=  [r.url for r in item1.layers if r.properties.name == 'Road Network'][0]   
    rD = [rD.url for rD in item1.layers if rD.properties.name == 'Truck Definition'][0]

    item = gis.content.get('001574ee31fc4efba0e70654761df723')

    re = [re.url for re in item.tables if re.properties.name == 'Renewal2'][0]

    item2 = gis.content.get('2a7d43964205474f90b89ba12fae0791')
    cp = [cp.url for cp in item2.layers if cp.properties.name == 'collection_orders'][0]

    item3  = gis.content.get('1cae8ee6e2a041ff806b14fb431240e1')
    tr = [tr.url for tr in item3.layers if tr.properties.name == 'Out_Route'][0]


    return c,l,r,rD,re,tr,cp


if __name__ == '__main__':
   
    start=datetime.now()

    containers,landfill,roads,routes,renewal,truck, ordersP = getLayers()
    arcpy.AddMessage(ordersP)
    arcpy.AddMessage(containers)
    Folder = arcpy.env.scratchFolder

    # NetworkTemplate = r'C:\Users\loque\OneDrive - University of Twente\Research\TEST\Network_template.xml'
    NetworkTemplate = str(getTemplate(Folder))
    arcpy.AddMessage(NetworkTemplate)
    iterations = arcpy.GetParameterAsText(1)
    
    m=0
    n = 0

    arcpy.AddMessage("Real time start time: "+str(start))
    network = str(createNetwork(roads, NetworkTemplate))
    
    arcpy.AddMessage ("============= ELAPSED TIME: "+str((datetime.now()-start))+'=====')
    resetValues(containers, truck, ordersP)
    arcpy.AddMessage ("============= ELAPSED TIME: "+str((datetime.now()-start))+'=====')

    arcpy.AddMessage("Simulating "+iterations+ " hours")
    for i in range (0,int(iterations)):
    # Call the function to generate random values
        generate_random_values(containers)
        m=m+1
        n=n+1
        arcpy.AddMessage ("============= ITERATION: "+str( m)+" =============")
        arcpy.AddMessage ("============= SIMULATED TIME: "+str(n)+":00 h ===")
        arcpy.AddMessage ("============= ELAPSED TIME: "+str((datetime.now()-start)))

        if m %6 == 0 and n != 24:
            arcpy.AddMessage  ("TIME TO CALCULATE ROUTE")
            result = VRP(network,containers, landfill, routes, renewal, Folder,truck,ordersP)
            # arcpy.SetParameter(0, result)
            cleaningTrash(containers, truck, ordersP)
            arcpy.AddMessage ('========= NOW STREETS ARE CLEAN =======')
        else:
             # Wait for n minutes
            time.sleep(5)
        if n == 24:
            n=0
    arcpy.AddMessage("Running succesfully")


